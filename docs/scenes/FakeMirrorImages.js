import{aQ as e,S as t,a9 as a,aI as i,aR as r,aS as l,aK as p}from"../vendor.js";import{v as s,f as n}from"../FakeMirrorVertex.js";class o{constructor(e){var{artifact:t,mergeConfig:a}=e;this.shaderConfig=a(t,{filterSize:"1.0",minDepth:"0.1",maxDepth:"5.0",depthThresholdFilter:"0.9",scale:"2.0",ptSize:"1.0",depthScale:"1.0",pixelDepth:"1.0",ifx:.00125,ify:.00125,itx:-.4,ity:-.6,ptSize:"1.0"})}afterLoadModel(t){var{engine:a,preload:i}=t,{model:r}=a,{images:l}=i.assets,p=Object.entries(l);if(null!=p&&p.length){var s=new e;s.name="imageGroup",p.forEach((e=>{var[t,a]=e,i=r.getObjectByName(t),l=this.createPoints(a);l.position.copy(i.position),s.add(l)})),r.add(s)}}createPoints(o){for(var h=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"1.0",{image:d}=o,{width:f,height:v}=d,u=new e,{ifx:m=.00125,ify:y=.00125,itx:x=-.4,ity:c=-.6,filterSize:S,minDepth:g,maxDepth:w,depthScale:D,depthThresholdFilter:z,scale:F,ptSize:j,pixelDepth:A}=this.shaderConfig,C={texImg:{type:"t",value:o},texSize:{type:"i2",value:[f,v]},iK:{type:"f4",value:[m,y,x,c]},alpha:{type:"f",value:h},filterSize:{type:"f",value:S},minDepth:{type:"f",value:g},maxDepth:{type:"f",value:w},depthThresholdFilter:{type:"f",value:z},scale:{type:"f",value:F},ptSize:{type:"f",value:(j*window.devicePixelRatio).toFixed(1).toString()},pixelDepth:{type:"f",value:A},depthScale:{type:"f",value:D}},I=new t({uniforms:C,side:a,transparent:!0,vertexShader:s,fragmentShader:n}),b=f/2*v,P=new Uint32Array(b),T=new Float32Array(b),K=0;K<b;K++)P[K]=K,T[K]=K;var M=new i;M.setAttribute("vertexIdx",new r(T,1)),M.setIndex(new l(new Uint32Array(P),1));var O=new p(M,I);return O.frustumCulled=!1,u.add(O),u}}export{o as default};

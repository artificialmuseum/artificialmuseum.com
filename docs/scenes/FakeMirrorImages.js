import{K as e,S as t,D as i,B as r,ah as a,ai as o,P as l}from"../vendor.js";class p{constructor(e){var{artifact:t,mergeConfig:i}=e;this.shaderConfig=i(t,{filterSize:"1.0",minDepth:"0.1",maxDepth:"5.0",depthThresholdFilter:"0.9",scale:"2.0",ptSize:"1.0",depthScale:"0.1",pixelDepth:"1.0",ifx:.00125,ify:.00125,itx:-.4,ity:-.6,ptSize:"1.0",textures:{}})}afterLoadModel(t){var{engine:i,preload:r}=t,{model:a}=i,{textures:o}=r.assets,l=Object.entries(o);if(null!=l&&l.length){var p=new e;p.name="textureGroup";var{target:c}=i.artifact.textures;l.forEach(((e,t)=>{var[i,r]=e,o=a.getObjectByName("".concat(c,"_").concat(t+1)),l=this.createPoints(r,o);p.add(l)})),a.add(p)}}createPoints(p,c){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"1.0",{image:f}=p,{width:v,height:x}=f,u=new e;u.position.copy(c.position),u.rotation.copy(c.rotation),u.scale.copy(c.scale);for(var{ifx:h=.00125,ify:s=.00125,itx:d=-.4,ity:m=-.6,filterSize:S,minDepth:g,maxDepth:z,depthScale:P,depthThresholdFilter:y,scale:D,ptSize:I,pixelDepth:w}=this.shaderConfig,b={texImg:{type:"t",value:p},texSize:{type:"i2",value:[v,x]},iK:{type:"f4",value:[h,s,d,m]},alpha:{type:"f",value:n},filterSize:{type:"f",value:S},minDepth:{type:"f",value:g},maxDepth:{type:"f",value:z},depthThresholdFilter:{type:"f",value:y},scale:{type:"f",value:D},ptSize:{type:"f",value:(I*window.devicePixelRatio).toFixed(1).toString()},pixelDepth:{type:"f",value:w},depthScale:{type:"f",value:P}},F=new t({uniforms:b,side:i,transparent:!0,vertexShader:"#define GLSLIFY 1\nattribute float vertexIdx;varying float vVertexIdx;varying vec2 vPtPos;uniform ivec2 texSize;uniform sampler2D texImg;uniform vec4 iK;uniform float scale;uniform float minDepth;uniform float maxDepth;uniform float pixelDepth;uniform int filterSize;uniform float ptSize;uniform float depthThresholdFilter;uniform float depthScale;float rgb2hue(vec3 c){vec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);vec4 p=mix(vec4(c.bg,K.wz),vec4(c.gb,K.xy),step(c.b,c.g));vec4 q=mix(vec4(p.xyw,c.r),vec4(c.r,p.yzx),step(p.x,c.r));float d=q.x-min(q.w,q.y);float e=1.0e-10;return abs(q.z+(q.w-q.y)/(6.0*d+e));}float getPixelDepth(ivec2 pixel){vec2 lookupPt=(vec2(pixel)+vec2(0.5))/vec2(texSize);float hue=rgb2hue(texture2D(texImg,lookupPt).rgb);float pxDepth=pixelDepth*hue;return pxDepth;}bool shouldDiscard(ivec2 currPixel){float centerPixelDepth=getPixelDepth(currPixel);for(int i=-filterSize;i<=filterSize;i++){for(int j=-filterSize;j<=filterSize;j++){if(i==0&&j==0){continue;}float currDepth=getPixelDepth(currPixel+ivec2(j,i));if(currDepth<minDepth||currDepth>=maxDepth||abs(centerPixelDepth-currDepth)>depthThresholdFilter){return true;}}}return false;}void main(){ivec2 frameSize=ivec2(texSize.x/2,texSize.y);int vertIdx=int(vertexIdx);int actualNumPts=frameSize.x*frameSize.y;if(vertIdx>=actualNumPts){gl_Position=vec4(0.0);return;}int ptY=vertIdx/int(frameSize.x);int ptX=vertIdx-ptY*int(frameSize.x);ivec2 pt=ivec2(ptX,ptY);if(shouldDiscard(pt)){gl_Position=vec4(0.0);return;}float currDepth=getPixelDepth(pt);vec3 ptPos=scale*vec3((iK.x*float(ptX)+iK.z)*currDepth,(iK.y*float(ptY)+iK.w)*currDepth,-currDepth*depthScale);vec4 mvPos=modelViewMatrix*vec4(ptPos,1.0);gl_Position=projectionMatrix*mvPos;vPtPos=vec2(float(ptX),float(ptY));vVertexIdx=vertexIdx;gl_PointSize=ptSize;}",fragmentShader:"#define GLSLIFY 1\nvarying float vVertexIdx;varying vec2 vPtPos;uniform ivec2 texSize;uniform sampler2D texImg;uniform float alpha;void main(){vec2 frameSizeF=vec2(texSize.x/2,texSize.y);ivec2 frameSize=ivec2(frameSizeF);int vertIdx=int(vVertexIdx);int actualNumPts=frameSize.x*frameSize.y;if(vertIdx>=actualNumPts){discard;}vec2 lookupPt=(vec2(vPtPos.x+frameSizeF.x,vPtPos.y)+vec2(0.5))/vec2(texSize);vec3 currColor=texture2D(texImg,lookupPt).rgb;gl_FragColor=vec4(currColor,alpha);}"}),K=v/2*x,j=new Uint32Array(K),q=new Float32Array(K),C=0;C<K;C++)j[C]=C,q[C]=C;var Y=new r;Y.setAttribute("vertexIdx",new a(q,1)),Y.setIndex(new o(new Uint32Array(j),1));var _=new l(Y,F);return _.frustumCulled=!1,u.add(_),u}}export{p as default};

import{c as a,az as o,aK as t,aL as e,aM as i,a5 as r,ao as n,aN as l,aO as p}from"../vendor.js";class s{constructor(a){var{artifact:o}=a;this.alpha=o.alpha}init(s){var v=this;return a((function*(){var{preload:a}=s,{videoElement:f}=a.assets,c=new o(f);c.minFilter=t;for(var h=800,m=new e,g=new Float32Array(144e4),u=0,d=0;u<g.length;u+=3,d++)g[u]=d%h,g[u+1]=Math.floor(d/h);m.setAttribute("position",new i(g,3));var w=new r({uniforms:{map:{value:c},width:{value:h},height:{value:600},nearClipping:{value:2},farClipping:{value:5},pointSize:{value:3},zOffset:{value:0}},vertexShader:"uniform sampler2D map;uniform float width;uniform float height;uniform float nearClipping, farClipping;uniform float pointSize;uniform float zOffset;varying vec2 vUv;const float XtoZ = 1.11146;const float YtoZ = 0.83359;void main() {vUv = vec2(position.x / width, position.y / height);vec4 color = texture2D( map, vUv );float depth = (color.r + color.g + color.b) / 3.0;float z = (1.0 - depth) * (farClipping - nearClipping) + nearClipping;vec4 pos = vec4((position.x / width - 0.5) * z * XtoZ * 2.0,(position.y / height - 0.5) * z * YtoZ * 2.0,- z + zOffset,1.0);gl_PointSize = pointSize;gl_Position = projectionMatrix * modelViewMatrix * pos;}",fragmentShader:"uniform sampler2D map;varying vec2 vUv;void main() {vec4 color = texture2D(map, vUv);gl_FragColor = vec4(color.r, color.g, color.b, 1);}"});v.alpha&&(w.blending=n,w.depthTest=!1,w.depthWrite=!1,w.transparent=!0);var z=new l(m,w);z.position.set(0,.5,0);var x=new p;x.add(z),v.model=x}))()}}export{s as default};
